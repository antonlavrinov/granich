{"version":3,"sources":["webpack:///./src/components/main-page/precourse-preparation/content-card/index.tsx","webpack:///./src/components/main-page/precourse-preparation/content-card/ContentCard.tsx","webpack:///./src/components/main-page/precourse-preparation/content-card/content-cards/YoutubeMixed.tsx","webpack:///./src/components/main-page/precourse-preparation/content-card/content-cards/YoutubeMixedPinterest.tsx","webpack:///./src/components/main-page/precourse-preparation/content-card/content-cards/Youtube.tsx","webpack:///./src/components/main-page/precourse-preparation/content-card/content-cards/Behance.tsx","webpack:///./src/components/main-page/precourse-preparation/content-card/content-cards/Medium.tsx","webpack:///./src/components/main-page/precourse-preparation/content-card/content-cards/Pinterest.tsx","webpack:///./src/components/main-page/precourse-preparation/content-card/content-cards/Podborka.tsx","webpack:///./src/components/main-page/precourse-preparation/content-card/PureContentCard.tsx","webpack:///./src/components/main-page/precourse-preparation/content-card/useLocalQuery.tsx"],"names":["ContentTypes","PodborkaOut","styled","props","BehanceIcon","BehanceMixedIcon","YoutubeIcon","YoutubeMixedIcon","MediumIcon","LinkIcon","LinkOutIcon","PinterestIcon","PinterestOutIcon","mixed","BehanceOutIcon","WrapperLink","a","podborka","WrapperExternalLink","pinterest","behance","medium","Container","div","TagList","Tag","Title","h4","Image","Descr","Button","youtube","ButtonText","IconsWrapper","YoutubeIconsWrapper","ButtonYoutubeTextWrapper","ButtonYoutubeText","ButtonYoutubeTiming","ButtonWatchBlockWrapper","ButtonWatchBlock","ButtonBlockTitle","ButtonReadBlockWrapper","mixedPinterest","ButtonReadBlock","ButtonMixedTiming","YoutubeMixed","content","youtubePng","mediumIcon","behanceIcon","className","href","contentSlug","target","type","contentType","contentTags","map","contentTag","idx","key","fluid","contentImage","contentTitle","contentYoutubeTiming","YoutubeMixedPinterestContent","pinterestIcon","YoutubeContent","pinterestLinkIcon","BehanceContent","behanceLinkIcon","contentExternalLink","rel","documentToReactComponents","contentDescription","json","MediumContent","mediumLinkIcon","PinterestContent","PodborkaContent","podborkaLinkIcon","PureContentCard","icons","findContentExternalLink","onClick","trackCustomEvent","category","action","label","Mixed","Youtube","Behance","Pinterest","Medium","Podborka","MixedPinterest","YoutubeMixedPinterest","ContentCard","data","useStaticQuery","behanceContentIcon","childImageSharp","pinterestContentIcon","pinterestLinkContentIcon","behanceLinkContentIcon","contentMediumPng","mediumLinkContentIcon","contentYoutubePng","podborkaLinkContentIcon","contentLinkPinterest","contentLinkBehance","contentLinkMedium"],"mappings":"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","file":"57732d4c9932099b1990e0ec08bdc5038a007196-e4110462c3c31f7435a5.js","sourcesContent":["import React from \"react\"\nimport { useLocalQuery } from \"./useLocalQuery\"\nimport { IContentCard } from \"../../../../interfaces/main-page\"\nimport { PureContentCard } from \"./PureContentCard\"\n\nexport enum ContentTypes {\n  Youtube = \"Youtube\",\n  Behance = \"Behance\",\n  Pinterest = \"Pinterest\",\n  Medium = \"Medium\",\n  Mixed = \"Youtube + Medium + Behance\",\n  MixedPinterest = \"Youtube + Pinterest\",\n  Podborka = \"Осознанная подборка\",\n}\n\ntype ContentProps = {\n  content: IContentCard\n}\n\nconst ContentCard: React.FC<ContentProps> = ({ content }) => {\n  const icons = useLocalQuery()\n\n  const findContentExternalLink = contentType => {\n    switch (contentType) {\n      case ContentTypes.Pinterest:\n        return content.contentLinkPinterest\n      case ContentTypes.Behance:\n        return content.contentLinkBehance\n      case ContentTypes.Medium:\n        return content.contentLinkMedium\n      default:\n        return \"/\"\n    }\n  }\n\n  return (\n    <PureContentCard\n      content={content}\n      icons={icons}\n      findContentExternalLink={findContentExternalLink}\n    />\n  )\n}\n\nexport default ContentCard\n","import React from \"react\"\nimport styled from \"styled-components\"\nimport BackgroundImage from \"gatsby-image\"\nimport Img from \"gatsby-image\"\n// import { OutboundLink } from \"gatsby-plugin-google-analytics\"\n\ntype PropsType = {\n  youtube?: boolean\n  podborka?: boolean\n  pinterest?: boolean\n  behance?: boolean\n  medium?: boolean\n  mixed?: boolean\n  mixedPinterest?: boolean\n}\n\nexport const PodborkaOut = styled(props => <Img {...props} />)`\n  width: 2.3vw;\n  display: block;\n  @media only screen and (max-width: 575px) {\n    width: 6.5vw;\n  }\n`\n\nexport const BehanceIcon = styled(props => <Img {...props} />)`\n  width: 2.3vw;\n  display: block;\n  margin-right: -0.4vw;\n  @media only screen and (max-width: 575px) {\n    width: 6.5vw;\n    margin-right: -1.4vw;\n  }\n`\n\nexport const BehanceMixedIcon = styled(props => <Img {...props} />)`\n  width: 2.7vw;\n  @media only screen and (max-width: 575px) {\n    width: 7vw;\n  }\n`\n\nexport const YoutubeIcon = styled(props => <Img {...props} />)`\n  height: auto;\n  width: 3.3vw;\n  margin-right: -0.7vw;\n  display: block;\n  margin-top: 0.05vw;\n  @media only screen and (max-width: 575px) {\n    height: auto;\n    width: 9.5vw;\n    margin-right: -2vw;\n  }\n`\n\nexport const YoutubeMixedIcon = styled(props => <Img {...props} />)`\n  height: auto;\n  width: 4.5vw;\n  margin-left: -0.1vw;\n  display: block;\n  @media only screen and (max-width: 575px) {\n    height: auto;\n    width: 10.8vw;\n    margin-left: -1vw;\n  }\n`\nexport const MediumIcon = styled(props => <Img {...props} />)`\n  width: 2.7vw;\n  margin-right: 0.4vw;\n  display: block;\n  @media only screen and (max-width: 575px) {\n    width: 7vw;\n  }\n`\n\nexport const LinkIcon = styled(props => <Img {...props} />)`\n  width: 2.3vw;\n  display: block;\n  margin-right: -0.4vw;\n  @media only screen and (max-width: 575px) {\n    width: 6.5vw;\n    margin-right: -1.4vw;\n  }\n`\n\nexport const LinkOutIcon = styled(props => <Img {...props} />)`\n  width: 2.2vw;\n  display: block;\n  @media only screen and (max-width: 575px) {\n    width: 6.5vw;\n  }\n`\n\nexport const PinterestIcon = styled(props => <Img {...props} />)`\n  width: 2.2vw;\n  display: block;\n  margin-right: -0.4vw;\n  @media only screen and (max-width: 575px) {\n    width: 6.5vw;\n  }\n`\nexport const PinterestOutIcon = styled(props => <Img {...props} />)`\n  width: 2.2vw;\n  display: block;\n  @media only screen and (max-width: 575px) {\n    width: 6.5vw;\n  }\n  ${props =>\n    props.mixed &&\n    `\n        width: 2.2vw;\n        width: 2.5vw;\n        margin-left: -0.7vw;\n        margin-right: 0.2vw;\n    `}\n`\nexport const BehanceOutIcon = styled(props => <Img {...props} />)`\n  width: 2.2vw;\n  display: block;\n  @media only screen and (max-width: 575px) {\n    width: 6.5vw;\n  }\n`\n\nexport const WrapperLink = styled.a<PropsType>`\n  background: #2b2b2b;\n  border-radius: 0.5vw;\n  display: flex;\n  flex-direction: column;\n  transition: all 0.3s ease;\n  height: 100%;\n  min-height: 20.3vw;\n  :hover {\n    transform: scale(1.03);\n    cursor: pointer;\n  }\n  :after {\n    background: none !important;\n  }\n  @media only screen and (max-width: 575px) {\n    border-radius: 1.5vw;\n    min-height: 56vw;\n    :hover {\n      transform: none;\n    }\n  }\n  ${props =>\n    props.podborka &&\n    `\n        background: linear-gradient(90deg, rgba(203,161,129,1) 0%, rgba(181,141,110,1) 100%);\n    `}\n`\n\nexport const WrapperExternalLink = styled.a<PropsType>`\n    background: red;\n    border-radius: 0.5vw;\n    display: flex;\n    flex-direction: column;\n    transition: all 0.3s ease;\n    // height: 20.3vw;\n    height: 100%;\n    min-height: 20.3vw;\n    :hover {\n        cursor: pointer;\n        transform: scale(1.03);\n    }\n    :after {\n      background: none !important;\n    }\n\n\n    ${props =>\n      props.pinterest &&\n      `\n        background: #830404;\n    `}\n    ${props =>\n      props.behance &&\n      `\n        background: #0E3983;\n    `}   \n    ${props =>\n      props.medium &&\n      `\n\n\n        background: linear-gradient(90deg, rgba(185,185,185,1) 0%, rgba(143,143,143,1) 100%);\n    `}\n    @media only screen and (max-width: 575px) {\n        min-height: 56vw;\n\n        border-radius: 1.5vw;\n        :hover {\n            transform: none;\n        }\n    } \n`\n\nexport const Container = styled.div`\n  padding: 0.5vw 1.05vw 0.7vw;\n  @media only screen and (max-width: 575px) {\n    padding: 1.9vw 2.8vw 2.2vw;\n  }\n`\n\nexport const TagList = styled.div`\n  display: flex;\n  margin-bottom: 0.4vw;\n  margin-left: -0.2vw;\n  margin-right: -0.2vw;\n  margin-top: 0.3vw;\n  flex-wrap: wrap;\n  line-height: 1;\n  @media only screen and (max-width: 575px) {\n    // margin-bottom: 2vw;\n    margin-top: 0.5vw;\n    margin-bottom: 1vw;\n  }\n`\n\nexport const Tag = styled.div`\n  border: 1px solid white;\n  color: white;\n  border-radius: 100vw;\n  font-weight: 400;\n  font-size: 0.9vw;\n  padding: 0.3vw 0.5vw 0.3vw;\n  display: inline-block;\n  letter-spacing: -0.03vw;\n  margin-right: 0.3vw;\n  margin-bottom: 0.3vw;\n  :last-child {\n    margin-right: 0;\n  }\n  @media only screen and (max-width: 575px) {\n    border-width: 1px;\n    font-size: 2.5vw;\n    padding: 0.4vw 1vw 0.4vw;\n    font-weight: 500;\n    margin-right: 1vw;\n    letter-spacing: -0.05vw;\n    margin-bottom: 1vw;\n  }\n`\n\nexport const Title = styled.h4`\n  font-size: 1.25vw;\n  line-height: 1.2;\n  font-weight: 500;\n  letter-spacing: -0.05vw;\n  color: white;\n  max-width: 14vw;\n  margin-left: -0.2vw;\n  white-space: normal;\n  @media only screen and (max-width: 575px) {\n    font-size: 3.8vw;\n    max-width: 100%;\n  }\n`\n\nexport const Image = styled(props => (\n  <BackgroundImage {...props}></BackgroundImage>\n))`\n  margin-bottom: 1vw;\n  max-height: 7.8vw;\n  min-height: 7.8vw;\n  height: 7.8vw;\n  @media only screen and (max-width: 575px) {\n    max-height: 21vw;\n    margin-bottom: 2.8vw;\n    min-height: 21vw;\n    height: 21vw;\n  }\n`\n\nexport const Descr = styled.div`\n  margin-top: 0.3vw;\n  max-width: 14vw;\n  margin-left: -0.2vw;\n  p {\n    font-size: 0.9vw;\n    color: white;\n    font-weight: 400;\n    letter-spacing: -0.01vw;\n    line-height: 1.15;\n    i {\n      color: inherit;\n    }\n  }\n\n  @media only screen and (max-width: 575px) {\n    max-width: 100%;\n    margin-top: 1vw;\n    p {\n      font-size: 2.8vw;\n    }\n  }\n`\n\nexport const Button = styled.div<PropsType>`\n    background: none;\n    border-radius: 0 0 0.5vw 0.5vw;\n    margin-top: auto;\n    display: flex;\n    justify-content: space-between;\n    padding: 1vw 1.1vw 1vw;\n    align-items: center;\n    ${props =>\n      props.youtube &&\n      `\n    background: #222222;\n    `}\n    ${props =>\n      props.podborka &&\n      `\n        background: #A67B5B;\n        align-items: center;\n        background: linear-gradient(145deg, rgba(181,140,109,1) 0%, rgba(145,106,77,1) 100%);\n    `}\n    ${props =>\n      props.pinterest &&\n      `\n        background: #4C0101;\n    `}\n    ${props =>\n      props.behance &&\n      `\n        background: #011E4B;\n    `}\n    ${props =>\n      props.medium &&\n      `\n        background: var(--granich-grey);\n        background: linear-gradient(145deg, rgba(136,137,137,1) 0%, rgba(79,79,79,1) 100%);\n    `}\n    ${props =>\n      props.mixed &&\n      `\n        align-items: flex-start;\n    `}\n\n    @media only screen and (max-width: 575px) {\n        border-radius: 0 0 1.5vw 1.5vw;\n        padding: 2.4vw 3vw 2.4vw;\n    }\n`\n\nexport const ButtonText = styled.div`\n  color: white;\n  font-size: 1.3vw;\n  font-weight: 500;\n  line-height: 0.95;\n\n  margin-left: -0.1vw;\n  @media only screen and (max-width: 575px) {\n    font-size: 4vw;\n  }\n`\n\nexport const IconsWrapper = styled.div`\n  display: flex;\n  margin-right: -0.4vw;\n  align-items: center;\n  margin-top: 0.1vw;\n\n  @media only screen and (max-width: 575px) {\n    margin-right: -1vw;\n  }\n`\nexport const YoutubeIconsWrapper = styled.div`\n  display: flex;\n  margin-right: -0.4vw;\n  align-items: center;\n  @media only screen and (max-width: 575px) {\n    margin-right: -1vw;\n  }\n`\n\n// YOUTUBE\nexport const ButtonYoutubeTextWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  padding-top: 0.8vw;\n`\n\nexport const ButtonYoutubeText = styled.div`\n  margin-top: -1vw;\n  color: white;\n  font-size: 1.3vw;\n  font-weight: 500;\n  line-height: 0.95;\n\n  margin-left: -0.1vw;\n  @media only screen and (max-width: 575px) {\n    font-size: 3.6vw;\n  }\n`\n\nexport const ButtonYoutubeTiming = styled.div`\n  color: white;\n  font-size: 0.67vw;\n  margin-top: 0.2vw;\n  @media only screen and (max-width: 575px) {\n    font-size: 2vw;\n    margin-top: 0.6vw;\n  }\n`\n\n// MIXED\n\nexport const ButtonWatchBlockWrapper = styled.div``\n\nexport const ButtonWatchBlock = styled.div`\n  display: flex;\n  align-items: flex-end;\n  margin-left: -0.15vw;\n`\nexport const ButtonBlockTitle = styled.div`\n  color: grey;\n  font-size: 0.8vw;\n  margin-bottom: 0.3vw;\n  @media only screen and (max-width: 575px) {\n    font-size: 2.5vw;\n    margin-bottom: 1vw;\n  }\n`\n\nexport const ButtonReadBlockWrapper = styled.div<PropsType>`\n  margin-bottom: -0.6vw;\n  display: flex;\n  flex-direction: column;\n\n  ${props =>\n    props.mixedPinterest &&\n    `\n     align-items: flex-end;\n    `}\n`\n\nexport const ButtonReadBlock = styled.div`\n  margin-right: -0.3vw;\n  display: flex;\n  @media only screen and (max-width: 575px) {\n    margin-right: -1vw;\n  }\n`\nexport const ButtonMixedTiming = styled.div`\n  color: white;\n  font-size: 0.67vw;\n  padding-bottom: 0.3vw;\n  @media only screen and (max-width: 575px) {\n    font-size: 2vw;\n    padding-bottom: 0.8vw;\n  }\n`\n","import React from \"react\"\nimport * as SC from \"../ContentCard\"\nimport { YoutubeMixedContentProps } from \"./types\"\n\nconst YoutubeMixed: React.FC<YoutubeMixedContentProps> = ({\n  content,\n  youtubePng,\n  mediumIcon,\n  behanceIcon,\n}) => {\n  return (\n    <SC.WrapperLink\n      className=\"content\"\n      href={`/${content.contentSlug}`}\n      target=\"_blank\"\n      type={content.contentType}\n    >\n      <SC.Container>\n        <SC.TagList>\n          {content.contentTags.map((contentTag, idx) => {\n            return <SC.Tag key={idx}>{contentTag}</SC.Tag>\n          })}\n        </SC.TagList>\n        <SC.Image fluid={content.contentImage.fluid}></SC.Image>\n        <SC.Title>{content.contentTitle}</SC.Title>\n      </SC.Container>\n      <SC.Button mixed>\n        <SC.ButtonWatchBlockWrapper>\n          <SC.ButtonBlockTitle>Посмотреть</SC.ButtonBlockTitle>\n          <SC.ButtonWatchBlock>\n            <SC.YoutubeMixedIcon fluid={youtubePng} />\n            {content.contentYoutubeTiming && (\n              <SC.ButtonMixedTiming>\n                {content.contentYoutubeTiming}\n              </SC.ButtonMixedTiming>\n            )}\n          </SC.ButtonWatchBlock>\n        </SC.ButtonWatchBlockWrapper>\n        <SC.ButtonReadBlockWrapper>\n          <SC.ButtonBlockTitle>Почитать</SC.ButtonBlockTitle>\n          <SC.ButtonReadBlock>\n            <SC.MediumIcon fluid={mediumIcon} />\n            <SC.BehanceMixedIcon fluid={behanceIcon} />\n          </SC.ButtonReadBlock>\n        </SC.ButtonReadBlockWrapper>\n      </SC.Button>\n    </SC.WrapperLink>\n  )\n}\n\nexport default YoutubeMixed\n","import React from \"react\"\nimport * as SC from \"../ContentCard\"\nimport { YoutubeMixedPinterestContentProps } from \"./types\"\n\nconst YoutubeMixedPinterestContent: React.FC<YoutubeMixedPinterestContentProps> = ({\n  content,\n  youtubePng,\n  pinterestIcon,\n}) => {\n  return (\n    <SC.WrapperLink\n      className=\"content\"\n      href={`/${content.contentSlug}`}\n      target=\"_blank\"\n      type={content.contentType}\n    >\n      <SC.Container>\n        <SC.TagList>\n          {content.contentTags.map((contentTag, idx) => {\n            return <SC.Tag key={idx}>{contentTag}</SC.Tag>\n          })}\n        </SC.TagList>\n        <SC.Image fluid={content.contentImage.fluid}></SC.Image>\n        <SC.Title>{content.contentTitle}</SC.Title>\n      </SC.Container>\n      <SC.Button mixed>\n        <SC.ButtonWatchBlockWrapper>\n          <SC.ButtonBlockTitle>Посмотреть</SC.ButtonBlockTitle>\n          <SC.ButtonWatchBlock>\n            <SC.YoutubeMixedIcon fluid={youtubePng} />\n            {content.contentYoutubeTiming && (\n              <SC.ButtonMixedTiming>\n                {content.contentYoutubeTiming}\n              </SC.ButtonMixedTiming>\n            )}\n          </SC.ButtonWatchBlock>\n        </SC.ButtonWatchBlockWrapper>\n        <SC.ButtonReadBlockWrapper mixedPinterest>\n          <SC.ButtonBlockTitle>Изучить</SC.ButtonBlockTitle>\n          <SC.ButtonReadBlock>\n            <SC.BehanceMixedIcon fluid={pinterestIcon} />\n          </SC.ButtonReadBlock>\n        </SC.ButtonReadBlockWrapper>\n      </SC.Button>\n    </SC.WrapperLink>\n  )\n}\n\nexport default YoutubeMixedPinterestContent\n","import React from \"react\"\nimport * as SC from \"../ContentCard\"\nimport { YoutubeContentProps } from \"./types\"\n\nconst YoutubeContent: React.FC<YoutubeContentProps> = ({\n  content,\n  youtubePng,\n  pinterestLinkIcon,\n}) => {\n  return (\n    <SC.WrapperLink\n      className=\"content\"\n      href={`/${content.contentSlug}`}\n      target=\"_blank\"\n      type={content.contentType}\n    >\n      <SC.Container>\n        <SC.TagList>\n          {content.contentTags.map((contentTag, idx) => {\n            return <SC.Tag key={idx}>{contentTag}</SC.Tag>\n          })}\n        </SC.TagList>\n        <SC.Image fluid={content.contentImage.fluid}></SC.Image>\n        <SC.Title>{content.contentTitle}</SC.Title>\n      </SC.Container>\n      <SC.Button youtube>\n        <SC.ButtonYoutubeTextWrapper>\n          <SC.ButtonYoutubeText>Посмотреть</SC.ButtonYoutubeText>\n          {content.contentYoutubeTiming && (\n            <SC.ButtonYoutubeTiming>\n              {content.contentYoutubeTiming}\n            </SC.ButtonYoutubeTiming>\n          )}\n        </SC.ButtonYoutubeTextWrapper>\n        <SC.YoutubeIconsWrapper>\n          <SC.YoutubeIcon fluid={youtubePng} />\n          <SC.PinterestOutIcon fluid={pinterestLinkIcon} />\n        </SC.YoutubeIconsWrapper>\n      </SC.Button>\n    </SC.WrapperLink>\n  )\n}\n\nexport default YoutubeContent\n","import React from \"react\"\nimport { documentToReactComponents } from \"@contentful/rich-text-react-renderer\"\nimport * as SC from \"../ContentCard\"\nimport { BehanceContentProps } from \"./types\"\n\nconst BehanceContent: React.FC<BehanceContentProps> = ({\n  content,\n  behanceIcon,\n  behanceLinkIcon,\n  contentExternalLink,\n}) => {\n  return (\n    <SC.WrapperExternalLink\n      className=\"content\"\n      behance\n      rel=\"noopener noreferrer\"\n      href={contentExternalLink}\n      target=\"_blank\"\n    >\n      <SC.Container>\n        <SC.TagList>\n          {content.contentTags.map((contentTag, idx) => {\n            return <SC.Tag key={idx}>{contentTag}</SC.Tag>\n          })}\n        </SC.TagList>\n        <SC.Image fluid={content.contentImage.fluid}></SC.Image>\n        <SC.Title>{content.contentTitle}</SC.Title>\n        <SC.Descr>\n          {documentToReactComponents(content.contentDescription.json)}\n        </SC.Descr>\n      </SC.Container>\n      <SC.Button behance>\n        <SC.ButtonText>Изучить</SC.ButtonText>\n        <SC.IconsWrapper>\n          <SC.BehanceIcon fluid={behanceIcon} />\n          <SC.BehanceOutIcon fluid={behanceLinkIcon} />\n        </SC.IconsWrapper>\n      </SC.Button>\n    </SC.WrapperExternalLink>\n  )\n}\n\nexport default BehanceContent\n","import React from \"react\"\nimport { documentToReactComponents } from \"@contentful/rich-text-react-renderer\"\nimport * as SC from \"../ContentCard\"\nimport { MediumContentProps } from \"./types\"\n\nconst MediumContent: React.FC<MediumContentProps> = ({\n  content,\n  mediumIcon,\n  mediumLinkIcon,\n  contentExternalLink,\n}) => {\n  return (\n    <SC.WrapperExternalLink\n      className=\"content\"\n      medium\n      rel=\"noopener noreferrer\"\n      href={contentExternalLink}\n      target=\"_blank\"\n    >\n      <SC.Container>\n        <SC.TagList>\n          {content.contentTags.map((contentTag, idx) => {\n            return <SC.Tag key={idx}>{contentTag}</SC.Tag>\n          })}\n        </SC.TagList>\n        <SC.Image fluid={content.contentImage.fluid}></SC.Image>\n        <SC.Title>{content.contentTitle}</SC.Title>\n        <SC.Descr>\n          {documentToReactComponents(content.contentDescription.json)}\n        </SC.Descr>\n      </SC.Container>\n      <SC.Button medium>\n        <SC.ButtonText>Изучить</SC.ButtonText>\n        <SC.IconsWrapper>\n          <SC.LinkIcon fluid={mediumIcon} />\n          <SC.LinkOutIcon fluid={mediumLinkIcon} />\n        </SC.IconsWrapper>\n      </SC.Button>\n    </SC.WrapperExternalLink>\n  )\n}\n\nexport default MediumContent\n","import React from \"react\"\nimport { documentToReactComponents } from \"@contentful/rich-text-react-renderer\"\nimport * as SC from \"../ContentCard\"\nimport { PinterestContentProps } from \"./types\"\n\nconst PinterestContent: React.FC<PinterestContentProps> = ({\n  content,\n  pinterestIcon,\n  pinterestLinkIcon,\n  contentExternalLink,\n}) => {\n  return (\n    <SC.WrapperExternalLink\n      className=\"content\"\n      pinterest\n      rel=\"noopener noreferrer\"\n      href={contentExternalLink}\n      target=\"_blank\"\n    >\n      <SC.Container>\n        <SC.TagList>\n          {content.contentTags.map((contentTag, idx) => {\n            return <SC.Tag key={idx}>{contentTag}</SC.Tag>\n          })}\n        </SC.TagList>\n        <SC.Image fluid={content.contentImage.fluid}></SC.Image>\n        <SC.Title>{content.contentTitle}</SC.Title>\n        <SC.Descr>\n          {documentToReactComponents(content.contentDescription.json)}\n        </SC.Descr>\n      </SC.Container>\n      <SC.Button pinterest>\n        <SC.ButtonText>Изучить</SC.ButtonText>\n        <SC.IconsWrapper>\n          <SC.PinterestIcon fluid={pinterestIcon} />\n          <SC.PinterestOutIcon fluid={pinterestLinkIcon} />\n        </SC.IconsWrapper>\n      </SC.Button>\n    </SC.WrapperExternalLink>\n  )\n}\n\nexport default PinterestContent\n","import React from \"react\"\nimport { documentToReactComponents } from \"@contentful/rich-text-react-renderer\"\nimport * as SC from \"../ContentCard\"\nimport { PodborkaContentProps } from \"./types\"\n\nconst PodborkaContent: React.FC<PodborkaContentProps> = ({\n  content,\n  podborkaLinkIcon,\n}) => {\n  return (\n    <SC.WrapperLink\n      className=\"content\"\n      podborka\n      href={`/${content.contentSlug}`}\n      target=\"_blank\"\n      type={content.contentType}\n    >\n      <SC.Container>\n        <SC.TagList>\n          {content.contentTags.map((contentTag, idx) => {\n            return <SC.Tag key={idx}>{contentTag}</SC.Tag>\n          })}\n        </SC.TagList>\n        <SC.Image fluid={content.contentImage.fluid}></SC.Image>\n        <SC.Title>{content.contentTitle}</SC.Title>\n        <SC.Descr>\n          {documentToReactComponents(content.contentDescription.json)}\n        </SC.Descr>\n      </SC.Container>\n      <SC.Button podborka>\n        <SC.ButtonText>Изучить</SC.ButtonText>\n        <SC.IconsWrapper>\n          <SC.PodborkaOut fluid={podborkaLinkIcon} />\n        </SC.IconsWrapper>\n      </SC.Button>\n    </SC.WrapperLink>\n  )\n}\n\nexport default PodborkaContent\n","import React from \"react\"\nimport YoutubeMixedContent from \"./content-cards/YoutubeMixed\"\nimport YoutubeMixedPinterestContent from \"./content-cards/YoutubeMixedPinterest\"\nimport YoutubeContent from \"./content-cards/Youtube\"\nimport BehanceContent from \"./content-cards/Behance\"\nimport MediumContent from \"./content-cards/Medium\"\nimport PinterestContent from \"./content-cards/Pinterest\"\nimport PodborkaContent from \"./content-cards/Podborka\"\nimport { trackCustomEvent } from \"gatsby-plugin-google-analytics\"\nimport { IContentCard } from \"../../../../interfaces/main-page\"\nimport { ContentTypes } from \".\"\n\ntype PureContentProps = {\n  content: IContentCard\n  icons: {\n    behanceIcon: string\n    pinterestIcon: string\n    pinterestLinkIcon: string\n    behanceLinkIcon: string\n    mediumIcon: string\n    mediumLinkIcon: string\n    youtubePng: string\n    podborkaLinkIcon: string\n  }\n  findContentExternalLink: (contentType: string) => string\n}\n\nexport const PureContentCard: React.FC<PureContentProps> = ({\n  content,\n  icons,\n  findContentExternalLink,\n}) => {\n  return (\n    <div\n      onClick={() =>\n        trackCustomEvent({\n          category: `Главная: контент \"${content.contentTitle}\"`,\n          action: \"click\",\n          label: \"Контент\",\n        })\n      }\n    >\n      {content.contentType === ContentTypes.Mixed && (\n        <YoutubeMixedContent\n          content={content}\n          behanceIcon={icons.behanceIcon}\n          youtubePng={icons.youtubePng}\n          mediumIcon={icons.mediumIcon}\n        />\n      )}\n      {content.contentType === ContentTypes.Youtube && (\n        <YoutubeContent\n          pinterestLinkIcon={icons.pinterestLinkIcon}\n          content={content}\n          youtubePng={icons.youtubePng}\n        />\n      )}\n      {content.contentType === ContentTypes.Behance && (\n        <BehanceContent\n          contentExternalLink={findContentExternalLink(content.contentType)}\n          behanceLinkIcon={icons.behanceLinkIcon}\n          content={content}\n          behanceIcon={icons.behanceIcon}\n        />\n      )}\n      {content.contentType === ContentTypes.Pinterest && (\n        <PinterestContent\n          contentExternalLink={findContentExternalLink(content.contentType)}\n          pinterestLinkIcon={icons.pinterestLinkIcon}\n          content={content}\n          pinterestIcon={icons.pinterestIcon}\n        />\n      )}\n      {content.contentType === ContentTypes.Medium && (\n        <MediumContent\n          contentExternalLink={findContentExternalLink(content.contentType)}\n          mediumLinkIcon={icons.mediumLinkIcon}\n          content={content}\n          mediumIcon={icons.mediumIcon}\n        />\n      )}\n      {content.contentType === ContentTypes.Podborka && (\n        <PodborkaContent\n          podborkaLinkIcon={icons.podborkaLinkIcon}\n          content={content}\n        />\n      )}\n      {content.contentType === ContentTypes.MixedPinterest && (\n        <YoutubeMixedPinterestContent\n          content={content}\n          youtubePng={icons.youtubePng}\n          pinterestIcon={icons.pinterestIcon}\n        />\n      )}\n    </div>\n  )\n}\n","import { graphql, useStaticQuery } from \"gatsby\"\n\nexport const useLocalQuery = () => {\n  const data = useStaticQuery(graphql`\n    query contentIcons {\n      pinterestContentIcon: file(relativePath: { eq: \"pinterest-icon.png\" }) {\n        childImageSharp {\n          fluid(maxWidth: 60, quality: 80) {\n            ...GatsbyImageSharpFluid\n          }\n        }\n      }\n      behanceContentIcon: file(relativePath: { eq: \"behance-icon.png\" }) {\n        childImageSharp {\n          fluid(maxWidth: 60, quality: 80) {\n            ...GatsbyImageSharpFluid\n          }\n        }\n      }\n      pinterestLinkContentIcon: file(\n        relativePath: { eq: \"pinterest-link-icon.png\" }\n      ) {\n        childImageSharp {\n          fluid(maxWidth: 60, quality: 80) {\n            ...GatsbyImageSharpFluid\n          }\n        }\n      }\n      behanceLinkContentIcon: file(\n        relativePath: { eq: \"behance-link-icon.png\" }\n      ) {\n        childImageSharp {\n          fluid(maxWidth: 60, quality: 80) {\n            ...GatsbyImageSharpFluid\n          }\n        }\n      }\n      contentMediumPng: file(relativePath: { eq: \"medium-icon.png\" }) {\n        childImageSharp {\n          fluid(maxWidth: 60, quality: 80) {\n            ...GatsbyImageSharpFluid\n          }\n        }\n      }\n      contentYoutubePng: file(relativePath: { eq: \"youtube-icon.png\" }) {\n        childImageSharp {\n          fluid(maxWidth: 60, quality: 80) {\n            ...GatsbyImageSharpFluid\n          }\n        }\n      }\n      podborkaLinkContentIcon: file(\n        relativePath: { eq: \"podborka-link-out.png\" }\n      ) {\n        childImageSharp {\n          fluid(maxWidth: 60, quality: 80) {\n            ...GatsbyImageSharpFluid\n          }\n        }\n      }\n      mediumLinkContentIcon: file(\n        relativePath: { eq: \"arrow-black-newpage-01.png\" }\n      ) {\n        childImageSharp {\n          fluid(maxWidth: 60, quality: 80) {\n            ...GatsbyImageSharpFluid\n          }\n        }\n      }\n    }\n  `)\n\n  const icons = {\n    behanceIcon: data.behanceContentIcon.childImageSharp.fluid,\n    pinterestIcon: data.pinterestContentIcon.childImageSharp.fluid,\n    pinterestLinkIcon: data.pinterestLinkContentIcon.childImageSharp.fluid,\n    behanceLinkIcon: data.behanceLinkContentIcon.childImageSharp.fluid,\n    mediumIcon: data.contentMediumPng.childImageSharp.fluid,\n    mediumLinkIcon: data.mediumLinkContentIcon.childImageSharp.fluid,\n    youtubePng: data.contentYoutubePng.childImageSharp.fluid,\n    podborkaLinkIcon: data.podborkaLinkContentIcon.childImageSharp.fluid,\n  }\n\n  return icons\n}\n"],"sourceRoot":""}